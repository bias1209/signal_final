import matplotlib.pyplot as plt
import numpy as np
import time
import time, random
import math
import serial
from collections import deque
from scipy import signal

#Display loading 
class PlotData:
    def __init__(self, max_entries=30):
        self.axis_x = deque(maxlen=max_entries)
        self.axis_y = deque(maxlen=max_entries)
    def add(self, x, y):
        self.axis_x.append(x)
        self.axis_y.append(y)
    
       
#initial
fig, (ax,ax2,ax3,ax4) = plt.subplots(4,1)
line,  = ax.plot(np.random.randn(100))
line2, = ax2.plot(np.random.randn(100))
line3, = ax3.plot(np.random.randn(100))
line4, = ax4.plot(np.random.randn(100)) 
plt.show(block = False)
plt.setp(line2,color = 'r')

#設定XY軸上下限
PData= PlotData(500)
PData2= PlotData(500)
PData3= PlotData(500)
PData4= PlotData(500)
ax.set_ylim(-5,5)
ax2.set_ylim(0,150)
ax3.set_ylim(-2,2)
ax4.set_ylim(0,150)


#互連用的東東
# plot parameters
print ('plotting data...')
# open serial port
strPort='com5'
ser = serial.Serial(strPort, 115200)
ser.flush()

start = time.time()

temparary = deque(maxlen=20)

while True:
    mean=0
    for ii in range(10): #

        try:
            data = float(ser.readline())
            temparary.append(data)
            PData.add(time.time() - start, data-np.mean(temparary)) #將高頻濾掉
            PData2.add(time.time() -start, data-np.mean(temparary))
        except:
            pass
        fftdata = np.fft.fftshift(np.fft.fft(PData2.axis_y))    #將點移至(-fs/2~fs/2)之間
    
    ax.set_xlim(PData.axis_x[0], PData.axis_x[0]+5) 
    ax2.set_xlim(-50,50) #設定取樣頻率為100HZ
    ax3.set_xlim(PData.axis_x[0], PData.axis_x[0]+5) 
    ax4.set_xlim(-50,50)

    line.set_xdata(PData.axis_x) #原波形
    line.set_ydata(PData.axis_y)

    x = np.linspace(-50,50,500) #在取樣頻率間取500的點
    if(len(PData2.axis_x)>=500): #超過500個點之後才開始移動

        PData3.axis_y=signal.lfilter([1/11, 1/11, 1/11,1/11,1/11,1/11,1/11,1/11,1/11,1/11,1/11], 1, PData2.axis_y) #11點平均濾波器
        newfftdata=  np.fft.fftshift(np.fft.fft(PData3.axis_y)) #將濾波過的波形取快速傅立葉並位移
        
        heartrate=[0,0] #initial x軸的心律
        heartrate_y=[0,0] #initial y軸的心律
        point_index=0 #設定基準點
        bef_ii= 0
        #取兩個波峰 並計算其中的差值
        #45、25為多次實驗之結果
        for ii in range(1,3,1): #取第一個波峰
            heartrate_y[0]=np.max(PData3.axis_y[bef_ii*45:ii*45])
            if(heartrate_y[0]>heartrate_y[1] and heartrate_y[0]<3):
                heartrate_y[1]=np.max(PData3.axis_y[bef_ii*45:ii*45])
                heartrate[0]=np.argmax(PData3.axis_y[bef_ii*45:ii*45])+1+bef_ii*45
                point_index=heartrate[0]+40 
            bef_ii = ii
        bef_ii= 0 
        heartrate_y[1]=0
        for ii in range(1,3,1): #取第二個波峰
            heartrate_y[0]=np.max(PData3.axis_y[bef_ii*25+point_index:ii*25+point_index])
            if(heartrate_y[0]>heartrate_y[1] and heartrate_y[0]<3):
                heartrate_y[1]=np.max(PData3.axis_y[bef_ii*25+point_index:ii*25+point_index])
                heartrate[1]=np.argmax(PData3.axis_y[bef_ii*25+point_index:ii*25+point_index])+1+bef_ii*25+point_index
            bef_ii= ii
            
        if(heartrate[0] != heartrate[1]): #兩者之差不能為0
            heartrate_permin=60/((heartrate[1]-heartrate[0])/100) #算出即時心律
        line2.set_xdata(x)
        line2.set_ydata(abs(fftdata)) #原訊號即時頻譜
        line3.set_xdata(PData.axis_x) 
        line3.set_ydata(PData3.axis_y) #濾波後的心跳
        line4.set_xdata(x)
        line4.set_ydata(abs(newfftdata))  #濾波後訊號即時頻譜
        fig.canvas.draw()
        fig.canvas.flush_events()
        print("即時心律:"+str(heartrate_permin)+"次/min")
